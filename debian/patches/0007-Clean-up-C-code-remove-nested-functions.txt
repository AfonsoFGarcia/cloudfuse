From c4e9f3ce06f9502892dee8c6c0927282172bb9ff Mon Sep 17 00:00:00 2001
From: Dillon Amburgey <dillona@dillona.com>
Date: Wed, 27 Apr 2011 19:27:20 -0500
Subject: [PATCH 07/17] Clean up C code, remove nested functions

Allows building in non-gcc compilers (read: clang)
---
 cloudfsapi.c |   35 +++++++++++++++++----------------
 cloudfsapi.h |    2 ++
 cloudfuse.c  |   61 +++++++++++++++-------------------------------------------
 cloudfuse.h  |   34 ++++++++++++++++++++++++++++++++
 4 files changed, 69 insertions(+), 63 deletions(-)
 create mode 100644 cloudfuse.h

diff --git a/cloudfsapi.c b/cloudfsapi.c
index 9e3a9bc..d8d6dce 100644
--- a/cloudfsapi.c
+++ b/cloudfsapi.c
@@ -373,23 +373,7 @@ int cloudfs_connect(char *username, char *password, char *authurl, int use_snet)
     use_snet = reconnect_args.use_snet;
   }
 
-  size_t header_dispatch(void *ptr, size_t size, size_t nmemb, void *stream)
-  {
-    char *header = (char *)alloca(size * nmemb + 1);
-    char *head = (char *)alloca(size * nmemb + 1);
-    char *value = (char *)alloca(size * nmemb + 1);
-    memcpy(header, (char *)ptr, size * nmemb);
-    header[size * nmemb] = '\0';
-    if (sscanf(header, "%[^:]: %[^\r\n]", head, value) == 2)
-    {
-      if (!strncasecmp(head, "x-auth-token", size * nmemb))
-        strncpy(storage_token, value, sizeof(storage_token));
-      if (!strncasecmp(head, "x-storage-url", size * nmemb))
-        strncpy(storage_url, value, sizeof(storage_url));
-    }
-    return size * nmemb;
-  }
-
+  
   pthread_mutex_lock(&pool_mut);
   debugf("Authenticating...");
   storage_token[0] = storage_url[0] = '\0';
@@ -417,6 +401,23 @@ int cloudfs_connect(char *username, char *password, char *authurl, int use_snet)
   return (response >= 200 && response < 300 && storage_token[0] && storage_url[0]);
 }
 
+size_t header_dispatch(void *ptr, size_t size, size_t nmemb, void *stream)
+{
+  char *header = (char *)alloca(size * nmemb + 1);
+  char *head = (char *)alloca(size * nmemb + 1);
+  char *value = (char *)alloca(size * nmemb + 1);
+  memcpy(header, (char *)ptr, size * nmemb);
+  header[size * nmemb] = '\0';
+  if (sscanf(header, "%[^:]: %[^\r\n]", head, value) == 2)
+  {
+    if (!strncasecmp(head, "x-auth-token", size * nmemb))
+      strncpy(storage_token, value, sizeof(storage_token));
+    if (!strncasecmp(head, "x-storage-url", size * nmemb))
+      strncpy(storage_url, value, sizeof(storage_url));
+  }
+  return size * nmemb;
+}
+
 void debugf(char *fmt, ...)
 {
   if (debug)
diff --git a/cloudfsapi.h b/cloudfsapi.h
index 19c7bf2..0ab1230 100644
--- a/cloudfsapi.h
+++ b/cloudfsapi.h
@@ -37,6 +37,8 @@ int object_truncate(const char *path, off_t size);
 void load_mimetypes(const char *filename);
 off_t file_size(int fd);
 
+size_t header_dispatch(void *ptr, size_t size, size_t nmemb, void *stream);
+
 void debugf(char *fmt, ...);
 #endif
 
diff --git a/cloudfuse.c b/cloudfuse.c
index 7ca29a4..b934e5a 100644
--- a/cloudfuse.c
+++ b/cloudfuse.c
@@ -16,25 +16,8 @@
 #include <stddef.h>
 #include "cloudfsapi.h"
 #include "config.h"
+#include "cloudfuse.h"
 
-#define OPTION_SIZE 1024
-static int cache_timeout;
-
-typedef struct dir_cache
-{
-  char *path;
-  dir_entry *entries;
-  time_t cached;
-  struct dir_cache *next, *prev;
-} dir_cache;
-static dir_cache *dcache;
-static pthread_mutex_t dmut;
-
-typedef struct
-{
-  int fd;
-  int flags;
-} openfile;
 
 static void dir_for(const char *path, char *dir)
 {
@@ -398,39 +381,25 @@ char *get_home_dir()
   return "~";
 }
 
+int parse_option(void *data, const char *arg, int key, struct fuse_args *outargs)
+{
+  if (sscanf(arg, " username = %[^\r\n ]", options.username) ||
+      sscanf(arg, " api_key = %[^\r\n ]", options.api_key) ||
+      sscanf(arg, " cache_timeout = %[^\r\n ]", options.cache_timeout) ||
+      sscanf(arg, " authurl = %[^\r\n ]", options.authurl) ||
+      sscanf(arg, " use_snet = %[^\r\n ]", options.use_snet))
+    return 0;
+  if (!strcmp(arg, "-f") || !strcmp(arg, "-d") || !strcmp(arg, "debug"))
+    cloudfs_debug(1);
+  return 1;
+}
+
 int main(int argc, char **argv)
 {
   char settings_filename[MAX_PATH_SIZE] = "";
   FILE *settings;
   struct fuse_args args = FUSE_ARGS_INIT(argc, argv);
-
-  struct options {
-      char username[OPTION_SIZE];
-      char api_key[OPTION_SIZE];
-      char cache_timeout[OPTION_SIZE];
-      char authurl[OPTION_SIZE];
-      char use_snet[OPTION_SIZE];
-  } options = {
-      .username = "",
-      .api_key = "",
-      .cache_timeout = "600",
-      .authurl = "https://auth.api.rackspacecloud.com/v1.0",
-      .use_snet = "false",
-  };
-
-  int parse_option(void *data, const char *arg, int key, struct fuse_args *outargs)
-  {
-    if (sscanf(arg, " username = %[^\r\n ]", options.username) ||
-        sscanf(arg, " api_key = %[^\r\n ]", options.api_key) ||
-        sscanf(arg, " cache_timeout = %[^\r\n ]", options.cache_timeout) ||
-        sscanf(arg, " authurl = %[^\r\n ]", options.authurl) ||
-        sscanf(arg, " use_snet = %[^\r\n ]", options.use_snet))
-      return 0;
-    if (!strcmp(arg, "-f") || !strcmp(arg, "-d") || !strcmp(arg, "debug"))
-      cloudfs_debug(1);
-    return 1;
-  }
-
+ 
   fuse_opt_parse(&args, &options, NULL, parse_option);
 
   snprintf(settings_filename, sizeof(settings_filename), "%s/.cloudfuse", get_home_dir());
diff --git a/cloudfuse.h b/cloudfuse.h
new file mode 100644
index 0000000..2572be2
--- /dev/null
+++ b/cloudfuse.h
@@ -0,0 +1,34 @@
+#define OPTION_SIZE 1024
+
+static int cache_timeout;
+
+typedef struct dir_cache
+{
+  char *path;
+  dir_entry *entries;
+  time_t cached;
+  struct dir_cache *next, *prev;
+} dir_cache;
+static dir_cache *dcache;
+static pthread_mutex_t dmut;
+
+typedef struct
+{
+  int fd;
+  int flags;
+} openfile;
+
+struct options {
+    char username[OPTION_SIZE];
+    char api_key[OPTION_SIZE];
+    char cache_timeout[OPTION_SIZE];
+    char authurl[OPTION_SIZE];
+    char use_snet[OPTION_SIZE];
+} options = {
+    .username = "",
+    .api_key = "",
+    .cache_timeout = "600",
+    .authurl = "https://auth.api.rackspacecloud.com/v1.0",
+    .use_snet = "false",
+};
+
-- 
1.7.9.5

